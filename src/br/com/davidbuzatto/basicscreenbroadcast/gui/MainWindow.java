/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.davidbuzatto.basicscreenbroadcast.gui;

import br.com.davidbuzatto.basicscreenbroadcast.gui.client.Client;
import br.com.davidbuzatto.basicscreenbroadcast.gui.model.BroadcastArea;
import br.com.davidbuzatto.basicscreenbroadcast.gui.server.Server;
import br.com.davidbuzatto.basicscreenbroadcast.utils.Constants;
import br.com.davidbuzatto.basicscreenbroadcast.utils.Utils;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author David
 */
public class MainWindow extends javax.swing.JFrame {

    private DefaultListModel<BroadcastArea> lstBroadcastAreaDefinitionsModel;
    private Server server;
    private Client client;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {

        initComponents();

        lstBroadcastAreaDefinitionsModel = new DefaultListModel<>();
        lstBroadcastAreaDefinitions.setModel( lstBroadcastAreaDefinitionsModel );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        popUpOutputAndErrors = new javax.swing.JPopupMenu();
        itemClearOutputAndErrors = new javax.swing.JMenuItem();
        pnlClient = new javax.swing.JPanel();
        lblClientHost = new javax.swing.JLabel();
        txtClientHost = new javax.swing.JTextField();
        lblClientPort = new javax.swing.JLabel();
        txtClientPort = new javax.swing.JTextField();
        btnClientConnect = new javax.swing.JButton();
        btnClientDisconnect = new javax.swing.JButton();
        pnlServer = new javax.swing.JPanel();
        lblServerPort = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        lblFPSGeneration = new javax.swing.JLabel();
        txtFPSGeneration = new javax.swing.JTextField();
        pnlScreenAreas = new javax.swing.JPanel();
        radioFullScreen = new javax.swing.JRadioButton();
        radioCustomizedBroadscastAreas = new javax.swing.JRadioButton();
        pnlBroascastAreaDefinitions = new javax.swing.JPanel();
        sclBroadcastAreaDefinitions = new javax.swing.JScrollPane();
        lstBroadcastAreaDefinitions = new javax.swing.JList<>();
        btnEditBroadcastAreas = new javax.swing.JButton();
        btnClearBroadcastAreas = new javax.swing.JButton();
        btnSaveBroadcastAreas = new javax.swing.JButton();
        btnLoadBroadcastAreas = new javax.swing.JButton();
        btnServerStart = new javax.swing.JButton();
        btnServerStop = new javax.swing.JButton();
        pnlImageCompression = new javax.swing.JPanel();
        lblImageCompression = new javax.swing.JLabel();
        sldImageCompression = new javax.swing.JSlider();
        pnlOutputAndErrors = new javax.swing.JPanel();
        sclOuputAndErrors = new javax.swing.JScrollPane();
        txtPaneOutputAndErrors = new javax.swing.JTextPane();

        itemClearOutputAndErrors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/bin_empty.png"))); // NOI18N
        itemClearOutputAndErrors.setText("Clear");
        itemClearOutputAndErrors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemClearOutputAndErrorsActionPerformed(evt);
            }
        });
        popUpOutputAndErrors.add(itemClearOutputAndErrors);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Basic Screen Broadcast - By David Buzatto");
        setIconImage(new ImageIcon( getClass().getResource( 
            "/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/application_cascade.png" ) ).getImage());
setResizable(false);

pnlClient.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Configurations"));
pnlClient.setToolTipText("");

lblClientHost.setText("Host:");

txtClientHost.setText("localhost");

lblClientPort.setText("Port:");

txtClientPort.setText("8085");

btnClientConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/connect.png"))); // NOI18N
btnClientConnect.setMnemonic('C');
btnClientConnect.setText("Connect");
btnClientConnect.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnClientConnectActionPerformed(evt);
    }
    });

    btnClientDisconnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/disconnect.png"))); // NOI18N
    btnClientDisconnect.setMnemonic('D');
    btnClientDisconnect.setText("Disconnect");
    btnClientDisconnect.setEnabled(false);
    btnClientDisconnect.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnClientDisconnectActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout pnlClientLayout = new javax.swing.GroupLayout(pnlClient);
    pnlClient.setLayout(pnlClientLayout);
    pnlClientLayout.setHorizontalGroup(
        pnlClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlClientLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblClientHost)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtClientHost, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblClientPort)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtClientPort, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnClientConnect)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnClientDisconnect)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlClientLayout.setVerticalGroup(
        pnlClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlClientLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblClientHost)
                .addComponent(txtClientHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblClientPort)
                .addComponent(txtClientPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnClientConnect)
                .addComponent(btnClientDisconnect))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pnlServer.setBorder(javax.swing.BorderFactory.createTitledBorder("Server Configurations"));

    lblServerPort.setText("Port:");

    txtServerPort.setText("8085");

    lblFPSGeneration.setText("FPS Generation:");

    txtFPSGeneration.setText("30");

    pnlScreenAreas.setBorder(javax.swing.BorderFactory.createTitledBorder("Screen Areas to Broadcast"));

    btnGroup.add(radioFullScreen);
    radioFullScreen.setSelected(true);
    radioFullScreen.setText("Full Screen");
    radioFullScreen.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radioFullScreenActionPerformed(evt);
        }
    });

    btnGroup.add(radioCustomizedBroadscastAreas);
    radioCustomizedBroadscastAreas.setText("Customized Broadcast Areas");
    radioCustomizedBroadscastAreas.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radioCustomizedBroadscastAreasActionPerformed(evt);
        }
    });

    pnlBroascastAreaDefinitions.setBorder(javax.swing.BorderFactory.createTitledBorder("Broadcast Area Definitions"));

    lstBroadcastAreaDefinitions.setBackground(new java.awt.Color(255, 255, 255));
    lstBroadcastAreaDefinitions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    lstBroadcastAreaDefinitions.setEnabled(false);
    sclBroadcastAreaDefinitions.setViewportView(lstBroadcastAreaDefinitions);

    btnEditBroadcastAreas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/pencil.png"))); // NOI18N
    btnEditBroadcastAreas.setMnemonic('E');
    btnEditBroadcastAreas.setText("Edit");
    btnEditBroadcastAreas.setEnabled(false);
    btnEditBroadcastAreas.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnEditBroadcastAreasActionPerformed(evt);
        }
    });

    btnClearBroadcastAreas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/delete.png"))); // NOI18N
    btnClearBroadcastAreas.setMnemonic('l');
    btnClearBroadcastAreas.setText("Clear");
    btnClearBroadcastAreas.setEnabled(false);
    btnClearBroadcastAreas.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnClearBroadcastAreasActionPerformed(evt);
        }
    });

    btnSaveBroadcastAreas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/disk.png"))); // NOI18N
    btnSaveBroadcastAreas.setMnemonic('S');
    btnSaveBroadcastAreas.setText("Save");
    btnSaveBroadcastAreas.setEnabled(false);
    btnSaveBroadcastAreas.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSaveBroadcastAreasActionPerformed(evt);
        }
    });

    btnLoadBroadcastAreas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/folder_wrench.png"))); // NOI18N
    btnLoadBroadcastAreas.setMnemonic('p');
    btnLoadBroadcastAreas.setText("Open");
    btnLoadBroadcastAreas.setEnabled(false);
    btnLoadBroadcastAreas.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnLoadBroadcastAreasActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout pnlBroascastAreaDefinitionsLayout = new javax.swing.GroupLayout(pnlBroascastAreaDefinitions);
    pnlBroascastAreaDefinitions.setLayout(pnlBroascastAreaDefinitionsLayout);
    pnlBroascastAreaDefinitionsLayout.setHorizontalGroup(
        pnlBroascastAreaDefinitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlBroascastAreaDefinitionsLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlBroascastAreaDefinitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(sclBroadcastAreaDefinitions)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBroascastAreaDefinitionsLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btnEditBroadcastAreas)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnClearBroadcastAreas)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnLoadBroadcastAreas)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnSaveBroadcastAreas)))
            .addContainerGap())
    );
    pnlBroascastAreaDefinitionsLayout.setVerticalGroup(
        pnlBroascastAreaDefinitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlBroascastAreaDefinitionsLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(sclBroadcastAreaDefinitions, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlBroascastAreaDefinitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnEditBroadcastAreas)
                .addComponent(btnSaveBroadcastAreas)
                .addComponent(btnLoadBroadcastAreas)
                .addComponent(btnClearBroadcastAreas))
            .addContainerGap())
    );

    javax.swing.GroupLayout pnlScreenAreasLayout = new javax.swing.GroupLayout(pnlScreenAreas);
    pnlScreenAreas.setLayout(pnlScreenAreasLayout);
    pnlScreenAreasLayout.setHorizontalGroup(
        pnlScreenAreasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlScreenAreasLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlScreenAreasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlBroascastAreaDefinitions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlScreenAreasLayout.createSequentialGroup()
                    .addComponent(radioFullScreen)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(radioCustomizedBroadscastAreas)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    pnlScreenAreasLayout.setVerticalGroup(
        pnlScreenAreasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlScreenAreasLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlScreenAreasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(radioFullScreen)
                .addComponent(radioCustomizedBroadscastAreas))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pnlBroascastAreaDefinitions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );

    btnServerStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/transmit_go.png"))); // NOI18N
    btnServerStart.setMnemonic('a');
    btnServerStart.setText("Start");
    btnServerStart.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnServerStartActionPerformed(evt);
        }
    });

    btnServerStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/basicscreenbroadcast/gui/icons/transmit_delete.png"))); // NOI18N
    btnServerStop.setMnemonic('o');
    btnServerStop.setText("Stop");
    btnServerStop.setEnabled(false);
    btnServerStop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnServerStopActionPerformed(evt);
        }
    });

    lblImageCompression.setText("<html>Image Compression: <font color='#00FF00'>0%</font></html>");

    sldImageCompression.setMajorTickSpacing(10);
    sldImageCompression.setMaximum(90);
    sldImageCompression.setMinorTickSpacing(5);
    sldImageCompression.setPaintTicks(true);
    sldImageCompression.setValue(0);
    sldImageCompression.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            sldImageCompressionStateChanged(evt);
        }
    });

    javax.swing.GroupLayout pnlImageCompressionLayout = new javax.swing.GroupLayout(pnlImageCompression);
    pnlImageCompression.setLayout(pnlImageCompressionLayout);
    pnlImageCompressionLayout.setHorizontalGroup(
        pnlImageCompressionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlImageCompressionLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlImageCompressionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(sldImageCompression, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addComponent(lblImageCompression, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
            .addContainerGap())
    );
    pnlImageCompressionLayout.setVerticalGroup(
        pnlImageCompressionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlImageCompressionLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblImageCompression, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sldImageCompression, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout pnlServerLayout = new javax.swing.GroupLayout(pnlServer);
    pnlServer.setLayout(pnlServerLayout);
    pnlServerLayout.setHorizontalGroup(
        pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlServerLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlScreenAreas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlServerLayout.createSequentialGroup()
                    .addComponent(lblServerPort)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblFPSGeneration)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtFPSGeneration, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnServerStart)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnServerStop)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pnlImageCompression, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    pnlServerLayout.setVerticalGroup(
        pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlServerLayout.createSequentialGroup()
            .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(pnlImageCompression, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblServerPort)
                .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblFPSGeneration)
                .addComponent(txtFPSGeneration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnServerStart)
                .addComponent(btnServerStop))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pnlScreenAreas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    pnlOutputAndErrors.setBorder(javax.swing.BorderFactory.createTitledBorder("Output and Errors"));

    txtPaneOutputAndErrors.setEditable(false);
    txtPaneOutputAndErrors.setBackground(new java.awt.Color(255, 255, 255));
    txtPaneOutputAndErrors.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    txtPaneOutputAndErrors.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            txtPaneOutputAndErrorsMouseClicked(evt);
        }
    });
    sclOuputAndErrors.setViewportView(txtPaneOutputAndErrors);

    javax.swing.GroupLayout pnlOutputAndErrorsLayout = new javax.swing.GroupLayout(pnlOutputAndErrors);
    pnlOutputAndErrors.setLayout(pnlOutputAndErrorsLayout);
    pnlOutputAndErrorsLayout.setHorizontalGroup(
        pnlOutputAndErrorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlOutputAndErrorsLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(sclOuputAndErrors)
            .addContainerGap())
    );
    pnlOutputAndErrorsLayout.setVerticalGroup(
        pnlOutputAndErrorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlOutputAndErrorsLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(sclOuputAndErrors, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlOutputAndErrors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(pnlClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pnlServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pnlOutputAndErrors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnClientConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientConnectActionPerformed
            
        try {

            boolean okToStart = true;
            int port = Integer.parseInt( txtClientPort.getText() );

            if ( port < 1 || port > 65535 ) {
                throw new FieldFormatException( "Port should be in the interval [1; 65535]." );
            }

            if ( !btnServerStart.isEnabled() ) {
                okToStart = JOptionPane.showConfirmDialog( 
                        this, 
                        "This instance of Basic Screen Broadcast is already\nstarted as a Server!\n\n" +
                        "Do you really want to connect the Client?", 
                        "Warning", 
                        JOptionPane.YES_NO_OPTION, 
                        JOptionPane.WARNING_MESSAGE ) == JOptionPane.YES_OPTION;
            }

            if ( okToStart ) {
                
                client = new Client( txtClientHost.getText(), port, this );
                client.start();

                btnClientConnect.setEnabled( false );
                btnClientDisconnect.setEnabled( true );
                
            }

        } catch ( IOException exc ) {
            Utils.insertFormattedTextJTextPane( txtPaneOutputAndErrors, 
                    "\n--------------------\n" +
                    "--- I/O Exception ---\n", Color.RED );
            Utils.insertFormattedExceptionTextJTextPane( txtPaneOutputAndErrors, exc, Color.RED );
        } catch ( NumberFormatException exc ) {
            JOptionPane.showMessageDialog(
                    this,
                    "Client port should be an integer!",
                    "ERROR", JOptionPane.ERROR_MESSAGE );
        } catch ( FieldFormatException exc ) {
            JOptionPane.showMessageDialog(
                    this,
                    exc.getMessage(),
                    "ERROR", JOptionPane.ERROR_MESSAGE );
        }

    }//GEN-LAST:event_btnClientConnectActionPerformed

    private void btnClientDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientDisconnectActionPerformed

        if ( client != null ) {
            try {
                client.stop();
            } catch ( IOException exc ) {
                Utils.insertFormattedTextJTextPane( txtPaneOutputAndErrors, 
                        "\n--------------------\n" +
                        "--- Problem in Client Disconnection ---\n", Color.RED );
                Utils.insertFormattedExceptionTextJTextPane( txtPaneOutputAndErrors, exc, Color.RED );
            }
        }

    }//GEN-LAST:event_btnClientDisconnectActionPerformed

    private void btnServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServerStartActionPerformed

        try {

            boolean okToStart = true;
            int port = Integer.parseInt( txtServerPort.getText() );
            int fps = Integer.parseInt( txtFPSGeneration.getText() );

            if ( port < 1 || port > 65535 ) {
                throw new FieldFormatException( "Port should be in the interval [1; 65535]." );
            }

            if ( fps < 1 || fps > 60 ) {
                throw new FieldFormatException( "FPS should be in the interval [1; 60]." );
            }

            List<BroadcastArea> startList = new ArrayList<>();

            if ( radioFullScreen.isSelected() ) {

                BroadcastArea b;
                
                if ( Constants.IN_PRODUCTION ) {
                    b = new BroadcastArea( "Full Screen", 
                            new Rectangle( Toolkit.getDefaultToolkit().getScreenSize() ) );
                } else {
                    b = new BroadcastArea( "Full Screen",
                        new Rectangle( 300, 300 ) );
                }
               
                startList.add( b );

            } else {

                if ( !lstBroadcastAreaDefinitionsModel.isEmpty() ) {
                    for ( int i = 0; i < lstBroadcastAreaDefinitionsModel.size(); i++ ) {
                        startList.add( lstBroadcastAreaDefinitionsModel.get( i ) );
                    }
                } else {
                    JOptionPane.showMessageDialog(
                            this,
                            "You should define at least one Broadcast Area!",
                            "ERROR", JOptionPane.ERROR_MESSAGE );
                    okToStart = false;
                }

            }

            if ( !btnClientConnect.isEnabled() ) {
                okToStart = JOptionPane.showConfirmDialog( 
                        this, 
                        "This instance of Basic Screen Broadcast is already\nconnected in a Server!\n\n" +
                        "Do you really want to start the Server?", 
                        "Warning", 
                        JOptionPane.YES_NO_OPTION, 
                        JOptionPane.WARNING_MESSAGE ) == JOptionPane.YES_OPTION;
            }
            
            if ( okToStart ) {
                
                server = new Server( 
                        port, 
                        fps, 
                        sldImageCompression.getValue(), 
                        this, 
                        startList );
                
                server.start();
                btnServerStart.setEnabled( false );
                btnServerStop.setEnabled( true );
                radioFullScreen.setEnabled( false );
                radioCustomizedBroadscastAreas.setEnabled( false );
                sldImageCompression.setEnabled( false );
                
                enableScreenAreas( false );
                
            }

        } catch ( AWTException exc ) {
            Utils.insertFormattedTextJTextPane( txtPaneOutputAndErrors, 
                    "\n--------------------\n" +
                    "--- Can't create Robot ---\n", Color.RED );
                Utils.insertFormattedExceptionTextJTextPane( txtPaneOutputAndErrors, exc, Color.RED );
        } catch ( IOException exc ) {
            Utils.insertFormattedTextJTextPane( txtPaneOutputAndErrors, 
                    "\n--------------------\n" +
                    "--- I/O Exception ---\n", Color.RED );
            Utils.insertFormattedExceptionTextJTextPane( txtPaneOutputAndErrors, exc, Color.RED );
        } catch ( NumberFormatException exc ) {
            JOptionPane.showMessageDialog(
                    this,
                    "Server port and FPS should be integers!",
                    "ERROR", JOptionPane.ERROR_MESSAGE );
        } catch ( FieldFormatException exc ) {
            JOptionPane.showMessageDialog(
                    this,
                    exc.getMessage(),
                    "ERROR", JOptionPane.ERROR_MESSAGE );
        }

    }//GEN-LAST:event_btnServerStartActionPerformed

    private void btnServerStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServerStopActionPerformed

        if ( server != null ) {
            try {
                server.stop();
            } catch ( IOException exc ) {
                Utils.insertFormattedTextJTextPane( txtPaneOutputAndErrors, 
                        "\n--------------------\n" +
                        "--- Problem in Server Stop ---\n", Color.RED );
                Utils.insertFormattedExceptionTextJTextPane( txtPaneOutputAndErrors, exc, Color.RED );
            } finally {
                btnServerStart.setEnabled( true );
                btnServerStop.setEnabled( false );
                radioFullScreen.setEnabled( true );
                radioCustomizedBroadscastAreas.setEnabled( true );
                sldImageCompression.setEnabled( true );
                if ( radioFullScreen.isSelected() ) {
                    enableScreenAreas( false );
                } else {
                    enableScreenAreas( true );
                }
            }
        }

    }//GEN-LAST:event_btnServerStopActionPerformed

    private void radioFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioFullScreenActionPerformed
        enableScreenAreas( false );
    }//GEN-LAST:event_radioFullScreenActionPerformed

    private void radioCustomizedBroadscastAreasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCustomizedBroadscastAreasActionPerformed
        enableScreenAreas( true );
    }//GEN-LAST:event_radioCustomizedBroadscastAreasActionPerformed

    private void btnEditBroadcastAreasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBroadcastAreasActionPerformed

        setExtendedState( ICONIFIED );

        BroadcastAreaSelectDialog d = new BroadcastAreaSelectDialog( this, true );
        d.setVisible( true );

    }//GEN-LAST:event_btnEditBroadcastAreasActionPerformed

    @SuppressWarnings( "unchecked" )
    private void btnLoadBroadcastAreasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadBroadcastAreasActionPerformed
        
        JFileChooser jfc = new JFileChooser( "./" );
        jfc.setDialogTitle( "Open Broadcast Area Definitions" );
        jfc.setMultiSelectionEnabled( false );
        
        String ext = "bsbb";
        
        jfc.removeChoosableFileFilter( jfc.getFileFilter() );
        jfc.setFileFilter( new FileNameExtensionFilter( 
                "Open Broadcast Area Definitions", ext ) );
        
        if ( jfc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {
            
            File f = jfc.getSelectedFile();
            
            try {

                FileInputStream fis = new FileInputStream( f );
                ObjectInputStream ois = new ObjectInputStream( fis );

                lstBroadcastAreaDefinitionsModel = (DefaultListModel<BroadcastArea>) ois.readObject();
                lstBroadcastAreaDefinitions.setModel( lstBroadcastAreaDefinitionsModel );
                ois.close();
                fis.close();

            } catch ( IOException exc ) {
                Utils.insertFormattedTextJTextPane( txtPaneOutputAndErrors, 
                        "\n--------------------\n" +
                        "--- I/O Exception ---\n", Color.RED );
                Utils.insertFormattedExceptionTextJTextPane( txtPaneOutputAndErrors, exc, Color.RED );
            } catch ( ClassNotFoundException exc ) {
                Utils.insertFormattedTextJTextPane( txtPaneOutputAndErrors, 
                        "\n--------------------\n" +
                        "--- Class Not Found Exception ---\n", Color.RED );
                Utils.insertFormattedExceptionTextJTextPane( txtPaneOutputAndErrors, exc, Color.RED );
            }
            
        }
        
    }//GEN-LAST:event_btnLoadBroadcastAreasActionPerformed

    private void btnSaveBroadcastAreasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveBroadcastAreasActionPerformed
        
        JFileChooser jfc = new JFileChooser( "./" );
        jfc.setDialogTitle( "Save Broadcast Area Definitions" );
        jfc.setMultiSelectionEnabled( false );
        
        String ext = "bsbb";
        boolean saveOrOverwrite = true;
        
        jfc.removeChoosableFileFilter( jfc.getFileFilter() );
        jfc.setFileFilter( new FileNameExtensionFilter( 
                "Save Broadcast Area Definitions", ext ) );
        
        if ( jfc.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ) {
            
            File f = jfc.getSelectedFile();
            if ( !f.getName().endsWith( ext ) ) {
                f = new File( f.getAbsolutePath() + "." + ext );
            }
            
            if ( f.exists() ) {
                if ( !(JOptionPane.showConfirmDialog( 
                        this, 
                        "The file will be overwrited! Continue?", 
                        "Confirm Overwrite", JOptionPane.YES_NO_OPTION ) == 
                        JOptionPane.YES_OPTION ) ) {
                    saveOrOverwrite = false;
                }
            }
            
            if ( saveOrOverwrite ) {
                try {
                    
                    FileOutputStream fos = new FileOutputStream( f );
                    ObjectOutputStream oos = new ObjectOutputStream( fos );
                    
                    oos.writeObject( lstBroadcastAreaDefinitionsModel );
                    oos.flush();
                    oos.close();
                    fos.close();
                    
                } catch ( IOException exc ) {
                    Utils.insertFormattedTextJTextPane( txtPaneOutputAndErrors, 
                            "\n--------------------\n" +
                            "--- I/O Exception ---\n", Color.RED );
                    Utils.insertFormattedExceptionTextJTextPane( txtPaneOutputAndErrors, exc, Color.RED );
                }
            }
            
        }
        
    }//GEN-LAST:event_btnSaveBroadcastAreasActionPerformed

    private void btnClearBroadcastAreasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearBroadcastAreasActionPerformed

        if ( lstBroadcastAreaDefinitionsModel.size() > 0 ) {

            if ( JOptionPane.showConfirmDialog( this,
                    "Do you really whant do clear the defined broadcast areas?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION ) == JOptionPane.YES_OPTION ) {
                lstBroadcastAreaDefinitionsModel.clear();
            }

        }

    }//GEN-LAST:event_btnClearBroadcastAreasActionPerformed

    private void txtPaneOutputAndErrorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPaneOutputAndErrorsMouseClicked
        
        if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            popUpOutputAndErrors.show( (Component) evt.getSource(), evt.getX(), evt.getY());
            
        }
        
    }//GEN-LAST:event_txtPaneOutputAndErrorsMouseClicked

    private void itemClearOutputAndErrorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemClearOutputAndErrorsActionPerformed
        
        txtPaneOutputAndErrors.setText( "" );
        
    }//GEN-LAST:event_itemClearOutputAndErrorsActionPerformed

    private void sldImageCompressionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldImageCompressionStateChanged
        
        int value = sldImageCompression.getValue();
        lblImageCompression.setText( generateImageCompressionLabelText( value ) );
        System.out.println( sldImageCompression.getValue() );
        
    }//GEN-LAST:event_sldImageCompressionStateChanged

    public void addBroadcastArea( BroadcastArea area ) {
        lstBroadcastAreaDefinitionsModel.addElement( area );
    }

    public List<BroadcastArea> getBroadcastAreas() {

        List<BroadcastArea> areas = new ArrayList<>();

        for ( int i = 0; i < lstBroadcastAreaDefinitionsModel.size(); i++ ) {
            areas.add( lstBroadcastAreaDefinitionsModel.get( i ) );
        }

        return areas;

    }

    public void clearBroadcastAreas() {
        lstBroadcastAreaDefinitionsModel.clear();
    }

    private void enableScreenAreas( boolean enable ) {
        lstBroadcastAreaDefinitions.setEnabled( enable );
        btnEditBroadcastAreas.setEnabled( enable );
        btnClearBroadcastAreas.setEnabled( enable );
        btnLoadBroadcastAreas.setEnabled( enable );
        btnSaveBroadcastAreas.setEnabled( enable );
    }

    private class FieldFormatException extends RuntimeException {

        public FieldFormatException( String message ) {
            super( message );
        }

    }

    public JTextPane getTxtPaneOutputAndError() {
        return txtPaneOutputAndErrors;
    }

    public JButton getBtnClientConnect() {
        return btnClientConnect;
    }

    public JButton getBtnClientDisconnect() {
        return btnClientDisconnect;
    }

    private String generateImageCompressionLabelText( int value ) {
        
        String color = "";
        
        if ( value <= 20 ) {
            color = "#00FF00";
        } else if ( value > 20 && value <= 70 ) {
            color = "#FF9900";
        } else {
            color = "#FF0000";
        }
        
        return String.format( 
                "<html>Image Compression: <font color='%s'>%d%%</font></html>", 
                color, value );
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearBroadcastAreas;
    private javax.swing.JButton btnClientConnect;
    private javax.swing.JButton btnClientDisconnect;
    private javax.swing.JButton btnEditBroadcastAreas;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JButton btnLoadBroadcastAreas;
    private javax.swing.JButton btnSaveBroadcastAreas;
    private javax.swing.JButton btnServerStart;
    private javax.swing.JButton btnServerStop;
    private javax.swing.JMenuItem itemClearOutputAndErrors;
    private javax.swing.JLabel lblClientHost;
    private javax.swing.JLabel lblClientPort;
    private javax.swing.JLabel lblFPSGeneration;
    private javax.swing.JLabel lblImageCompression;
    private javax.swing.JLabel lblServerPort;
    private javax.swing.JList<BroadcastArea> lstBroadcastAreaDefinitions;
    private javax.swing.JPanel pnlBroascastAreaDefinitions;
    private javax.swing.JPanel pnlClient;
    private javax.swing.JPanel pnlImageCompression;
    private javax.swing.JPanel pnlOutputAndErrors;
    private javax.swing.JPanel pnlScreenAreas;
    private javax.swing.JPanel pnlServer;
    private javax.swing.JPopupMenu popUpOutputAndErrors;
    private javax.swing.JRadioButton radioCustomizedBroadscastAreas;
    private javax.swing.JRadioButton radioFullScreen;
    private javax.swing.JScrollPane sclBroadcastAreaDefinitions;
    private javax.swing.JScrollPane sclOuputAndErrors;
    private javax.swing.JSlider sldImageCompression;
    private javax.swing.JTextField txtClientHost;
    private javax.swing.JTextField txtClientPort;
    private javax.swing.JTextField txtFPSGeneration;
    private javax.swing.JTextPane txtPaneOutputAndErrors;
    private javax.swing.JTextField txtServerPort;
    // End of variables declaration//GEN-END:variables
}
